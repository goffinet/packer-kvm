#Generated by packer-kvm/build-packer-templates.yaml

variable "config_file" {
  type    = string
  default = "{{ config_file }}"
}

variable "cpu" {
  type    = string
  default = "{{ item.cpu |default(vm.cpu) }}"
}

variable "destination_server" {
  type    = string
  default = "{{ item.destination_server |default(destination_server) }}"
}

variable "disk_size" {
  type    = string
  default = "{{ item.disk_size |default(vm.disk_size) }}"
}

variable "headless" {
  type    = string
  default = "true"
}

variable "iso_checksum" {
  type    = string
  default = "file:{{ item.iso_url }}/{{ item.checksum_filename }}"
}

variable "iso_url" {
  type    = string
  default = "{{ item.iso_url }}/{{ item.iso_name }}"
}

variable "name" {
  type    = string
  default = "{{ item.flavor }}"
}

variable "ram" {
  type    = string
  default = "{{ item.ram |default(vm.ram) }}"
}

variable "ssh_password" {
  type    = string
  default = {% if item.type == 'debian' %}"{{ item.ssh_password |default(debian.ssh_password) }}"
  {% elif item.type == 'redhat' %}"{{ item.ssh_password |default(redhat.ssh_password) }}"
  {% endif -%}
}

variable "ssh_username" {
  type    = string
  default = {% if item.type == 'debian' %}"{{ item.ssh_username |default('ubuntu') }}"
  {% elif item.type == 'redhat' %}"{{ item.ssh_username |default('root') }}"
  {% endif -%}
}

variable "version" {
  type    = string
  default = "{{ version }}"
}

source "qemu" "{{ label }}" {
  accelerator      = "kvm"
  boot_command     = {% if item.flavor == "ubuntu" and item.version == "20.04" %}{{ item.boot_command | default(debian.ubuntu2004.boot_command) | regex_replace('\'', '\"') | regex_replace('ds=\"','ds=\\\"') | regex_replace('config_file}/\"','config_file}/\\\"') }}
  {% elif item.flavor == "ubuntu" and item.version == "22.04" %}{{ item.boot_command | default(debian.ubuntu2204.boot_command) | regex_replace('\'', '\"') | regex_replace('ds=\"','ds=\\\"') | regex_replace('config_file}/\"','config_file}/\\\"') }}
  {% elif item.flavor == "ubuntu" and item.version == "24.04" %}{{ item.boot_command | default(debian.ubuntu2404.boot_command) | regex_replace('\'', '\"')  | regex_replace('ds=\"','ds=\\\"') | regex_replace('config_file}/\"','config_file}/\\\"') }}
  {% elif item.type == 'redhat' and item.flavor != 'fedora' %}{{ item.boot_command | default(redhat.boot_command) | regex_replace('\'', '\"') }}
  {% elif item.type == 'redhat' and item.flavor == 'fedora' %}{{ item.boot_command | default(redhat.fedora.boot_command) | regex_replace('\'', '\"') }}
  {% endif -%}
  disk_cache       = "none"
  disk_compression = true
  disk_discard     = "unmap"
  disk_interface   = "virtio"
  disk_size        = var.disk_size
  format           = "qcow2"
  headless         = var.headless
  http_directory   = "."
  iso_checksum     = var.iso_checksum
  iso_url          = var.iso_url
  net_device       = "virtio-net"
  output_directory = "artifacts/qemu/${var.name}${var.version}"
  qemu_binary      = "/usr/bin/qemu-system-x86_64"
  qemuargs         = [["-m", "${var.ram}M"], ["-smp", "${var.cpu}"], ["-cpu", "host"]]
  shutdown_command = "sudo /usr/sbin/shutdown -h now"
  ssh_password     = var.ssh_password
  ssh_username     = var.ssh_username
{% if item.type == 'debian' and debian.additional_parameters is defined %}{{ debian.additional_parameters|indent('  ', True) }}
{% elif item.type == 'redhat' and redhat.additional_parameters is defined %}{{ redhat.additional_parameters|indent('  ', True) }}
{%- endif -%}
}

build {
  sources = ["source.qemu.{{ label }}"]

  provisioner "shell" {
    execute_command = "{% raw %}{{ .Vars }}{% endraw %} sudo -E bash '{% raw %}{{ .Path }}{% endraw %}'"
    inline          = {% if item.type == 'debian' %}{{ item.shell_provisioner| default(debian.shell_provisioner) | regex_replace('\'', '\"') }}
    {% elif item.type == 'redhat' %}{{ item.shell_provisioner | default(redhat.shell_provisioner) | regex_replace('\'', '\"') }}
    {% endif -%}
  }

  provisioner "ansible-local" {
    playbook_dir  = "ansible"
    playbook_file = "ansible/playbook.yml"
  }

  post-processor "shell-local" {
    environment_vars = ["IMAGE_NAME=${var.name}", "IMAGE_VERSION=${var.version}", "DESTINATION_SERVER=${var.destination_server}"]
    script           = "scripts/push-image.sh"
  }
}